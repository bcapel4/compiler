package Parse;

action code {: static Symbol.Symbol sym(String s) {
	         return Symbol.Symbol.symbol(s);
	        }
	    :};

parser code  {: 
  Lexer lexer;

  public void syntax_error(java_cup.runtime.Symbol current) {
   report_error("Syntax error (" + current.sym + ")", current);
  }

  ErrorMsg.ErrorMsg errorMsg;

  public void report_error(String message, java_cup.runtime.Symbol info) {
      errorMsg.error(info.left, message);
  }

  public Grm(Lexer l, ErrorMsg.ErrorMsg err) {
    this();
    errorMsg=err;
    lexer=l;
  }
:};

scan with {: return lexer.nextToken(); :};

terminal String ID, STRING;
terminal Integer INT;
terminal COMMA, COLON, SEMICOLON, LPAREN, RPAREN, LBRACK, RBRACK, 
	LBRACE, RBRACE, DOT, PLUS, MINUS, TIMES, DIVIDE, EQ, NEQ, LT, LE, 
	GT, GE, AND, OR, ASSIGN, ARRAY, IF, THEN, ELSE, WHILE, FOR, TO,
	DO, LET, IN, END, OF, BREAK, NIL, FUNCTION, VAR, TYPE;

non terminal Absyn.Exp 		 Exp;
non terminal Absyn.ArrayExp 	 ArrayExp;
non terminal Absyn.AssignExp     AssignExp;
non terminal Absyn.CallExp 	 CallExp;
non terminal Absyn.ExpList       FunctionArgumentList;
non terminal Absyn.ExpList       NextFunctionArgumentList;
non terminal Absyn.ForExp        ForExp;
non terminal Absyn.IfExp 	 IfExp;
non terminal Absyn.LetExp 	 LetExp;
non terminal Absyn.OpExp 	 OpExp;
non terminal Absyn.RecordExp     RecordExp;
non terminal Absyn.SeqExp 	 SeqExp;
non terminal Absyn.WhileExp      WhileExp;
non terminal Absyn.ExpList 	 ExpList;
non terminal Absyn.ExpList 	 Sequence;
non terminal Absyn.ExpList       NextSequence;
non terminal Absyn.Var 		 Var;
non terminal Absyn.FieldVar      FieldVar;
non terminal Absyn.SubscriptVar  SubscriptVar;
non terminal Absyn.DecList 	 DecList;
non terminal Absyn.Dec           Dec;
non terminal Absyn.VarDec 	 VarDec;
non terminal Absyn.FunctionDec   FunctionDec;
non terminal Absyn.FunctionDec   NextFunctionDec;
non terminal Absyn.TypeDec 	 TypeDec;
non terminal Absyn.TypeDec 	 NextTypeDec;
non terminal Absyn.NameTy 	 DecTypeId;
non terminal Absyn.Ty 		 Ty;
non terminal Absyn.FieldList 	 FieldList;
non terminal Absyn.FieldList	 NextFieldList;
non terminal Absyn.FieldExpList  FieldExpList;
non terminal Absyn.FieldExpList  NextFieldExpList;


precedence nonassoc THEN;
precedence nonassoc ELSE;
precedence nonassoc ASSIGN;
precedence left OR;
precedence left AND;
precedence nonassoc EQ, NEQ, LT, LE, GT, GE;
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE;



start with Exp;

Exp ::= error:e
	  {: RESULT = new Absyn.SeqExp(eleft, null); :}
	| Var:v
	  {: RESULT = new Absyn.VarExp(vleft, v); :}
	| STRING:s
	  {: RESULT = new Absyn.StringExp(sleft, s); :}
	| INT:i
	  {: RESULT = new Absyn.IntExp(ileft, i); :}
	| NIL:n
	  {: RESULT = new Absyn.NilExp(nleft); :}
	| BREAK:b
	  {: RESULT = new Absyn.BreakExp(bleft); :}
	| AssignExp:as
	  {: RESULT = as; :}	
	| ArrayExp:a
	  {: RESULT = a; :}
	| ForExp:f
	  {: RESULT = f; :}
	| CallExp:c
	  {: RESULT = c; :}
	| IfExp:i
	  {: RESULT = i; :}
	| LetExp:l
	  {: RESULT = l; :}
	| OpExp:o
	  {: RESULT = o; :}
	| RecordExp:r
	  {: RESULT = r; :}
 	| WhileExp:w
	  {: RESULT = w; :}
	| SeqExp:s
	  {: RESULT = s; :}
	;

ArrayExp ::= ID:n LBRACK Exp:ex1 RBRACK OF Exp:ex2
 	     {: RESULT = new Absyn.ArrayExp(nleft, sym(n), ex1,ex2); :}
	     ;

AssignExp ::= Var:v ASSIGN Exp:ex
	      {: RESULT = new Absyn.AssignExp(vleft, v, ex); :}
	      ;


ForExp ::= FOR:f ID:n ASSIGN Exp:ex1 TO Exp:ex2 DO Exp:ex3
	   {: RESULT = new Absyn.ForExp(fleft, new Absyn.VarDec(nleft, sym(n), null, ex1), ex2, ex3); :}
	   ; 

LetExp ::= LET:l DecList:d IN ExpList:ex END
	   {: RESULT = new Absyn.LetExp(lleft , d, new Absyn.SeqExp( exleft, ex)); :}
	   ;

SeqExp ::= LPAREN:lp ExpList:list RPAREN
	   {: RESULT = new Absyn.SeqExp(lpleft, list); :}
	   ;

WhileExp ::= WHILE:w Exp:ex1 DO Exp:ex2
	 {: RESULT = new Absyn.WhileExp(wleft, ex1, ex2); :}
	 ;   

OpExp ::=
  	Exp:ex1 PLUS Exp:ex2
 	{: RESULT = new Absyn.OpExp(ex1left, ex1, Absyn.OpExp.PLUS, ex2); :}
 	| Exp:ex1 MINUS Exp:ex2
	{: RESULT = new Absyn.OpExp(ex1left, ex1, Absyn.OpExp.MINUS, ex2); :}
  	| Exp:ex1 TIMES Exp:ex2
  	{: RESULT = new Absyn.OpExp(ex1left, ex1, Absyn.OpExp.MUL, ex2); :}
  	| Exp:ex1 DIVIDE Exp:ex2
  	{: RESULT = new Absyn.OpExp(ex1left, ex1, Absyn.OpExp.DIV, ex2); :}
 	| Exp:ex1 GT Exp:ex2
  	{: RESULT = new Absyn.OpExp(ex1left, ex1, Absyn.OpExp.GT, ex2); :}
  	| Exp:ex1 LT Exp:ex2
  	{: RESULT = new Absyn.OpExp(ex1left, ex1, Absyn.OpExp.LT, ex2); :}
  	| Exp:ex1 GE Exp:ex2
  	{: RESULT = new Absyn.OpExp(ex1left, ex1, Absyn.OpExp.GE, ex2); :}
  	| Exp:ex1 LE Exp:ex2
  	{: RESULT = new Absyn.OpExp(ex1left, ex1, Absyn.OpExp.LE, ex2); :}
  	| Exp:ex1 EQ Exp:ex2
  	{: RESULT = new Absyn.OpExp(ex1left, ex1, Absyn.OpExp.EQ, ex2); :}
  	| Exp:ex1 NEQ Exp:ex2
  	{: RESULT = new Absyn.OpExp(ex1left, ex1, Absyn.OpExp.NE, ex2); :}
  	| MINUS:m Exp:ex
  	{: RESULT = new Absyn.OpExp(mleft, new Absyn.IntExp(mleft,0), Absyn.OpExp.MINUS, ex); :}
  	;

RecordExp ::= ID:n LBRACE FieldExpList:l RBRACE
	  {: RESULT = new Absyn.RecordExp(nleft, sym(n), l); :}
	  ;

ExpList ::= 
	{: RESULT = null; :}
	| Exp:ex
	{: RESULT = new Absyn.ExpList(ex, null); :}
	|Sequence:s
	{: RESULT = s; :}
	;

Sequence ::= Exp:ex SEMICOLON NextSequence:s
	 {: RESULT = new Absyn.ExpList(ex,s); :}
	 ;

NextSequence ::= Exp:ex
	     {: RESULT = new Absyn.ExpList(ex, null); :}
	     | Sequence:s
	     {: RESULT = s; :}
	     ;

CallExp ::=
  ID:n LPAREN FunctionArgumentList:l RPAREN
  {: RESULT = new Absyn.CallExp(nleft, sym(n), l); :}
  ;

FunctionArgumentList ::=
  {: RESULT = null; :}
  | Exp:e NextFunctionArgumentList:l
  {: RESULT = new Absyn.ExpList(e, l); :}
  ;

NextFunctionArgumentList ::=
  {: RESULT = null; :}
  | COMMA:c Exp:e NextFunctionArgumentList:l
  {: RESULT = new Absyn.ExpList(e, l); :}
  ;

IfExp ::=
  Exp:e1 AND Exp:e2
  {: RESULT = new Absyn.IfExp(e1left, e1, e2, new Absyn.IntExp(e1left, 0)); :}
  | Exp:e1 OR Exp:e2
  {: RESULT = new Absyn.IfExp(e1left, e1, new Absyn.IntExp(e1left, 1), e2); :}
  | IF:i Exp:e1 THEN Exp:e2
  {: RESULT = new Absyn.IfExp(ileft, e1, e2); :}
  | IF:i Exp:e1 THEN Exp:e2 ELSE Exp:e3
  {: RESULT = new Absyn.IfExp(ileft, e1, e2, e3); :}
  ;














Var ::=   ID:n
	  {: RESULT = new Absyn.SimpleVar(nleft, sym(n)); :}
	;
